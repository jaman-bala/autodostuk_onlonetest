"""Изминение всех моделей

Revision ID: d6906929f63d
Revises: 08a36e3d8297
Create Date: 2024-12-30 10:08:22.100623

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "d6906929f63d"
down_revision: Union[str, None] = "08a36e3d8297"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("answers_question_id_fkey", "answers", type_="foreignkey")
    op.create_foreign_key(None, "answers", "questions", ["question_id"], ["id"], ondelete="CASCADE")
    op.drop_column("answers", "updated_date")
    op.drop_column("answers", "created_date")
    op.drop_column("groups", "updated_date")
    op.drop_column("groups", "created_date")
    op.drop_column("payments", "updated_date")
    op.drop_column("payments", "created_date")
    op.drop_constraint("questions_ticket_id_fkey", "questions", type_="foreignkey")
    op.drop_constraint("questions_theme_id_fkey", "questions", type_="foreignkey")
    op.create_foreign_key(None, "questions", "tickets", ["ticket_id"], ["id"], ondelete="CASCADE")
    op.create_foreign_key(None, "questions", "themes", ["theme_id"], ["id"], ondelete="CASCADE")
    op.drop_column("themes", "updated_date")
    op.drop_column("themes", "created_date")
    op.drop_column("tickets", "updated_date")
    op.drop_column("tickets", "created_date")
    op.drop_column("totals", "updated_date")
    op.drop_column("totals", "created_date")
    op.drop_column("users", "updated_date")
    op.drop_column("users", "created_date")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users",
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "users",
        sa.Column(
            "updated_date",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "totals",
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "totals",
        sa.Column(
            "updated_date",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "tickets",
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "tickets",
        sa.Column(
            "updated_date",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "themes",
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "themes",
        sa.Column(
            "updated_date",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_constraint(None, "questions", type_="foreignkey")
    op.drop_constraint(None, "questions", type_="foreignkey")
    op.create_foreign_key("questions_theme_id_fkey", "questions", "themes", ["theme_id"], ["id"])
    op.create_foreign_key("questions_ticket_id_fkey", "questions", "tickets", ["ticket_id"], ["id"])
    op.add_column(
        "payments",
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "payments",
        sa.Column(
            "updated_date",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "groups",
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "groups",
        sa.Column(
            "updated_date",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "answers",
        sa.Column(
            "created_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "answers",
        sa.Column(
            "updated_date",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_constraint(None, "answers", type_="foreignkey")
    op.create_foreign_key(
        "answers_question_id_fkey", "answers", "questions", ["question_id"], ["id"]
    )
    # ### end Alembic commands ###
